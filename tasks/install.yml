---
- name: "Check for binary"
  ansible.builtin.stat:
    path: "{{ _elasticsearch_exec_path }}/elasticsearch"
  changed_when: false
  register: __installed_bin

- name: "Repo install tasks"
  ansible.builtin.include_tasks: install_repo.yml
  when: elasticsearch_install_method == "repo"

- name: "Sources install tasks"
  ansible.builtin.include_tasks: install_src.yml
  when: elasticsearch_install_method == "src"

- name: "Copy elasticsearch configuration."
  ansible.builtin.template:
    src: "elasticsearch.yml.j2"
    dest: "{{ _elasticsearch_config_dir }}/elasticsearch.yml"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: "0644"
  notify: Restart elasticsearch

- name: "Copy jvm.options configuration."
  ansible.builtin.template:
    src: "jvm.options.j2"
    dest: "{{ _elasticsearch_config_dir }}/jvm.options"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: "0644"
  notify: Restart elasticsearch

- name: "Configuring systemd-entrypoint"
  ansible.builtin.template:
    src: systemd-entrypoint.j2
    dest: "{{ _elasticsearch_exec_path }}/systemd-entrypoint"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: "0755"
  when: elasticsearch_install_method == "src"

- name: "Configuring systemd"
  ansible.builtin.template:
    src: elasticsearch.service.j2
    dest: "/lib/systemd/system/elasticsearch.service"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: "0644"
  notify:
    - "Reload systemd"
    - "Restart elasticsearch"

- name: "Ensure elasticsearch is started and enabled"
  ansible.builtin.service:
    name: elasticsearch
    state: started
    enabled: true
  when: elasticsearch_start_service

- name: "Check for tokens"
  ansible.builtin.stat:
    path: "{{ _elasticsearch_config_dir }}/enrollment_tokens.txt"
  changed_when: false
  register: __token_file
  when: elasticsearch_get_tokens

- name: "Get token taks"
  when: elasticsearch_get_tokens and not __token_file.stat.exists
  block:
    - name: "Run elasticsearch-create-enrollment-token for Kibana"
      become: true
      become_user: "{% if elasticsearch_install_method == 'src' %}{{ elasticsearch_user }}{% else %}root{% endif %}"
      ansible.builtin.command: >
        {{ _elasticsearch_exec_path }}/elasticsearch-create-enrollment-token -s kibana --url https://127.0.0.1:9200
      register: kibana_token
      changed_when: false
      failed_when: false

    - name: "Show Kibana enrollment token"
      ansible.builtin.debug:
        msg: "Enrollment token for Kibana: {{ kibana_token.stdout }}"

    - name: Add token to local file
      become: true
      become_user: "{% if elasticsearch_install_method == 'src' %}{{ elasticsearch_user }}{% else %}root{% endif %}"
      ansible.builtin.lineinfile:
        path: "{{ _elasticsearch_config_dir }}/enrollment_tokens.txt"
        line: "Kibana enrollment token: {{ kibana_token.stdout }}"
        create: true
        insertafter: EOF
        mode: '0644'

    - name: "Run elasticsearch-create-enrollment-token for node"
      become: true
      become_user: "{% if elasticsearch_install_method == 'src' %}{{ elasticsearch_user }}{% else %}root{% endif %}"
      ansible.builtin.command: >
        {{ _elasticsearch_exec_path }}/elasticsearch-create-enrollment-token -s node
      register: node_token
      changed_when: false
      failed_when: false

    - name: "Show node enrollment token"
      ansible.builtin.debug:
        msg: "Node enrollment token: {{ node_token.stdout }}"

    - name: "Add token to local file"
      become: true
      become_user: "{% if elasticsearch_install_method == 'src' %}{{ elasticsearch_user }}{% else %}root{% endif %}"
      ansible.builtin.lineinfile:
        path: "{{ _elasticsearch_config_dir }}/enrollment_tokens.txt"
        line: "Node enrollment token: {{ node_token.stdout }}"
        insertafter: EOF
        mode: '0644'

- name: "Reset elastic password"
  become: true
  become_user: "{% if elasticsearch_install_method == 'src' %}{{ elasticsearch_user }}{% else %}root{% endif %}"
  ansible.builtin.shell: |
    set -o pipefail
    printf "y\n{{ elasticsearch_user_elastic_pwd }}\n{{ elasticsearch_user_elastic_pwd }}\n" |
    {{ _elasticsearch_exec_path }}/elasticsearch-reset-password -i -u elastic
  args:
    executable: /bin/bash
  no_log: true
  changed_when: false
  when:
    - elasticsearch_security_enabled
    - elasticsearch_user_elastic_pwd | length > 0
